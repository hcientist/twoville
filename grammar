program
  : block[indent=0]? EOF

block
  : (INDENTATION statement)*

statement
  | expression RIGHT_ARROW T RIGHT_ARROW expression NEWLINE block[indent+=1]
  | expression RIGHT_ARROW T NEWLINE block[indent+=1]
  | T RIGHT_ARROW expression NEWLINE block[indent+=1]
  | T RIGHT_ARROW expression RIGHT_ARROW T NEWLINE block[indent+=1]
  : expression NEWLINE

expression
  : assignment

assignment
  : logical ((ASSIGN|PLUS_ASSIGN|MINUS_ASSIGN|TIMES_ASSIGN|DIVIDE_ASSIGN) logical)*

logical:
  : comparative ((AND|OR) comparative)*

comparative
  : relational ((EQUAL|NOT_EQUAL) relational)*

relational
  : additive ((MORE|MORE_OR_EQUAL|LESS|LESS_OR_EQUAL) additive)*

additive
  : multiplicative ((PLUS|MINUS) multiplicative)*

multiplicative
  : power ((ASTERISK|FORWARDSLASH|PERCENT) power)*

power
  : unary (CARET unary)*

unary
  : (MINUS|NOT)* reference

reference
  # object.property
  : atom (DOT IDENTIFIER)*

  # Array subscript
  | atom (LEFT_BRACKET expression RIGHT_BRACKET)*

  # Function call
  | atom (LEFT_PARENTHESIS (expression (COMMA expression)*)? RIGHT_PARENTHESIS)*

atom
  : INTEGER
  | REAL
  | NOTHING
  | LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

  # Anonymous function definition
  | LEFT_PARENTHESIS (IDENTIFIER (COMMA IDENTIFIER)*) RIGHT_PARENTHESIS RIGHT_ARROW expression

  # Named function definition
  | IDENTIFIER LEFT_PARENTHESIS (IDENTIFIER (COMMA IDENTIFIER)*) RIGHT_PARENTHESIS RIGHT_ARROW block[indent+=1]

  # Vector
  | LEFT_BRACKET (expression (COMMA expression)*)? RIGHT_BRACKET

  # Flow control
  | IF expression NEWLINE block[indent+=1] ELSE NEWLINE block[indent+=1]
  | WHILE expression NEWLINE block[indent+=1]
  | FOR reference (IN expression)? (TO|THROUGH) expression (BY expression)? NEWLINE block[indent+=1]
  | WITH expression NEWLINE block[indent+=1]
